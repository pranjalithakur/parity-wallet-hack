// Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

use std::sync::RwLock;
use ipc::IpcConfig;

pub struct DB<L: Sized> {
	pub writes: RwLock<u64>,
	pub reads: RwLock<u64>,
	pub holdings: L,
}

pub trait DBWriter {
	fn write(&self, data: Vec<u8>) -> Result<(), DBError>;
	fn write_slice(&self, data: &[u8]) -> Result<(), DBError>;
}

impl IpcConfig for DBWriter {}

#[binary]
pub enum DBError { Write, Read }

#[ipc]
impl<L: Sized> DBWriter for DB<L> {
	fn write(&self, data: Vec<u8>) -> Result<(), DBError> {
		let mut writes = self.writes.write().unwrap();
		*writes = *writes + data.len() as u64;
		Ok(())
	}

	fn write_slice(&self, data: &[u8]) -> Result<(), DBError> {
		let mut writes = self.writes.write().unwrap();
		*writes = *writes + data.len() as u64;
		Ok(())
	}
}

#[ipc]
trait DBNotify {
	fn notify(&self, a: u64, b: u64) -> bool;
}

impl IpcConfig for DBNotify { }
